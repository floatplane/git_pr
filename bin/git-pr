#!/usr/bin/ruby

# Future improvements:
# 1) Use more git shell integration
#    https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
#    https://coderwall.com/p/bt93ia
# 2) Take a branch name instead of a PR number and Do The Right Thing


require 'colorize'
require 'git'
require 'git_pr'
require 'highline/import'
require 'io/console'
require 'octokit'
require 'optparse'
require 'ostruct'
require 'pp'

$verbose = false
$default_remotes = ["origin", "upstream"]

LIST_STATUS_KEY = "pr.liststatus"

options = OpenStruct.new(:help => false,
                         :verbose => false,
                         :project => nil,
                         :pull_request => nil,
                         :diff => OpenStruct.new(),
                         :difftool => OpenStruct.new(),
                         :list => OpenStruct.new(),
                         :merge => OpenStruct.new(:yolo => false),
                         :open => OpenStruct.new(),
                         :status => OpenStruct.new())

global_options = OptionParser.new do |opts|
  opts.banner = <<eos
git_pr version #{GitPr::VERSION}

Usage: git pr [options] command [options]
eos

  opts.separator "\nGlobal options"

  opts.on("-p",
          "--project [REMOTE|PROJECT]",
          "The GitHub project to access. Can be a named remote, or a GitHub project in",
          "<user>/<project> form. Defaults to the GitHub project that the \"origin\"",
          "or \"upstream\" remote points to. You can override the default remote",
          "with git config. Run: 'git config --add #{GitPr::GitHub::DEFAULT_REMOTE_KEY} <remote_name>'"
          ) do |project|
    options.project = project
  end
  opts.on("-h", "--help", "Show help") do
    options.help = true
  end
  opts.on("-v", "--verbose", "Verbose output") do
    $verbose = true
  end
  opts.on("-V", "--version", "Print version") do
    puts GitPr::VERSION
    exit
  end

  opts.separator <<eos

Valid commands:
    diff:     Use "git diff" to display a diff for a pull request
    difftool: Like "diff", but uses "git difftool" instead
    list:     List open pull requests
    status:   Show the detailed status for a pull request
    merge:    Merge and close a pull request
    open:     Open a PR page on the web

Run "git pr help <command>" for more detailed help.

eos
end

def make_diff_argument_parser command_name
  OptionParser.new do |opts|
    opts.banner = <<eos
Usage: git pr #{command_name} [PR number] [-- [additional options]]

Fetch the latest changes for the specified PR, and then run "git
#{command_name}". Additional options are passed to the "git #{command_name}" command.
eos

    opts.separator ""
  end
end

commands = {
  'diff' => make_diff_argument_parser("diff"),
  'difftool' => make_diff_argument_parser("difftool"),
  'list' => OptionParser.new do |opts|
    opts.banner = "Usage: git pr list [options]"

    opts.separator "\nList command options"

    opts.on("-u", "--user [USERNAME]", "Only list PRs for the named GitHub user") do |user|
      options.list.user = user
    end

    opts.on("-s", "--[no-]status",
            "Include PR status in the output. Including status is slower,",
            "as each PR's status must be queried individually. You can set",
            "the default behavior with git config:",
            "\n",
            "git config --bool --add #{LIST_STATUS_KEY} true"
           ) do |s|
      options.list.status = s
    end

    opts.separator ""
  end,
  'merge' => OptionParser.new do |opts|
    opts.banner = <<eos
Usage: git pr merge [PR number]

If a PR number isn't passed, a menu of open PRs will be displayed.
eos

    opts.separator "\nMerge command options"

    opts.on("-y", "--yolo",
            "Don't check PR status before merging"
           ) do |y|
      options.merge.yolo = y
    end

    opts.separator ""
  end,
  'open' => OptionParser.new do |opts|
    opts.banner = "Usage: git pr open [pr_number|branch]"

    opts.separator <<eos

Open a pull request page, if one exists, for the passed in PR number or
branch. Otherwise, open a diff page where a pull request can be created. If no
argument is passed, open a PR page for the current branch.

eos

  end,
  'status' => OptionParser.new do |opts|
    opts.banner = "Usage: git pr status [pr_number|branch]"

    opts.separator <<eos

Report detailed pull request status for the passed in PR number or
branch.

eos
  end
}

def alias_to_command(command)
  case command
  when "dt", /^difft/
    "difftool"
  when "d", /^d/
    "diff"
  when "web", /^o/
    "open"
  when "ls", /^l/
    "list"
  when "ci", /^m/
    "merge"
  when /^s/
    "status"
  else
    command
  end
end

# Parse global options. Print help if any unrecognized
begin
  global_options.order!
rescue OptionParser::InvalidOption => e
  puts e
  puts global_options
  exit
end

command = alias_to_command(ARGV.shift)

# Check for the special command help. Support "git pr help" and "git pr help <command>"
if command == "help"
  command = alias_to_command(ARGV.shift)
  if commands[command]
    puts commands[command]
  else
    puts global_options
  end
  exit
end

# Unrecognized command? Print help and exit
if !commands[command]
  puts global_options
  exit
end

# Parse command options. Print help if any unrecognized
begin
  options[command].additional_arguments = commands[command].permute!
rescue OptionParser::InvalidOption => e
  puts e
  puts commands[command]
  exit
end

if not GitPr::GitHub.test_credentials and not GitPr::GitHub.prompt_for_credentials
  exit -1
end

GitPr::GitHub.initialize_octokit

# Get local Git object pointed at our repo root. Do some extra work to deal with submodules.
git_dir = `git rev-parse --show-toplevel`.chomp!
git = nil
if Dir.exists? File.join(git_dir, '.git')
  puts "Opening standard repository in #{git_dir}" if $verbose
  git = Git.open git_dir
elsif File.exists? File.join(git_dir, '.git')
  # Submodules have a file named .git that points to the true git dir
  submodule_git_dir = File.read(File.join(git_dir, '.git')).chomp!.split[1]
  puts "Opening submodule repository from #{git_dir}/.git repository: #{submodule_git_dir} index: #{File.join(submodule_git_dir, 'index')}" if $verbose
  git = Git.open git_dir, :repository => submodule_git_dir, :index => File.join(submodule_git_dir, 'index')
end

def find_pull_request_from_command_line_argument(git, github_project, argument)
  # Look for an existing pull request that fits. A branch name or PR number can
  # be passed on the command line, or we default to the current branch.
  pulls = Octokit.pulls github_project
  source = argument || git.current_branch
  pull = pulls.any? ? pulls.find { |p| p.head.ref == source || p.number.to_s == source } : nil
  pull ? GitPr::PullRequest.new(pull) : nil
end

# Figure out what GitHub project we're dealing with.
github_project = GitPr::GitHub.determine_project_name_from_command_line git, options.project, $default_remotes
puts "GitHub project: #{github_project}" if $verbose

case command

when "merge"
  unless options.merge.additional_arguments.empty?
    pull_request = options.merge.additional_arguments.shift.to_i
  end
  # Load a pull request
  pull = GitPr::GitHub.find_or_prompt_for_pull_request github_project, pull_request
  GitPr::merge_pull_cleanly git, pull, options.merge

when "list"
  pulls = Octokit.pulls("#{github_project}").map { |p| GitPr::PullRequest.new(p) }
  if options.list.user
    pulls = pulls.select { |p| p.user.login == options.list.user }
  end
  include_status = false
  if options.list.to_h.has_key?(:status)
    include_status = options.list.status
  elsif git.config.has_key? LIST_STATUS_KEY
    include_status = git.config(LIST_STATUS_KEY) == 'true'
  end

  if pulls.any?
    pulls.each { |p| puts p.summary(include_status) }
  else
    puts "No open pull requests found.".yellow
  end

when "open"
  argument = options[command].additional_arguments.shift
  pull = find_pull_request_from_command_line_argument git, github_project, argument
  if pull
    `open #{pull.html_url}`
    exit
  end

  # We didn't find a matching pull request, so let's try to open the "create
  # pull request" page for the passed in branch, or the current branch.
  source = argument || git.current_branch
  if not git.is_local_branch_fast? source
    puts "Unknown branch '#{source}'.".red
    exit -1
  end
  target_repo = Octokit.repo(github_project)
  target = target_repo.default_branch
  if source == target
    puts "Current branch '#{target}' is the default branch for the project '#{github_project}'."
    puts "Can't open pull request page.".yellow
    exit -1
  end

  # Need to open a diff page. Diff URL looks like:
  # https://github.com/FiftyThree/Studio/compare/FiftyThree:master...floatplane:blobstore
  # So I need to: get the upstream for the named branch. Extract the github project owner.
  github_target_owner, github_target_project = github_project.split "/"
  remote = git.find_remote_for_local_branch source
  remote_url = remote ? remote.url : nil
  unless remote_url and remote_url.match /github\.com/
    puts "Branch '#{source}' has never been pushed to GitHub."
    exit -1
  end
  github_source_owner = remote_url.match(/git@github.com:(.*)\//)[1]
  url = "https://github.com/#{github_source_owner}/#{github_target_project}/compare/#{github_target_owner}:#{target}...#{github_source_owner}:#{source}?expand=1"
  `open #{url}`
  exit

when "diff", "difftool"
  pull_request = nil

  unless options[command].additional_arguments.empty?
    pull_request = options[command].additional_arguments.shift.to_i
  end

  unless pull_request
    puts "Must specify a pull request to diff.\n".red
    puts commands[command]
    exit -1
  end

  puts "Getting pull request information..."
  begin
    pull = Octokit.pull github_project, pull_request
  rescue Octokit::NotFound
    puts "Pull request #{pull_request} not found in #{github_project}.\n".red
    puts commands[command]
    exit -1
  end

  # Make sure we have the source and destination remotes
  source_remote, target_remote = GitPr.ensure_remotes_for_pull_request git, pull

  # Figure out if we need to fetch; skip it if we can
  def have_commit_locally git, sha
    begin
      git.object sha
    rescue Git::GitExecuteError
      return false
    end
    true
  end
  source_remote.fetch unless have_commit_locally git, pull.head.sha
  target_remote.fetch unless have_commit_locally git, pull.base.sha

  source_branch = pull.head.ref
  target_branch = pull.base.ref
  merge_base = `git merge-base #{source_remote}/#{source_branch} #{target_remote}/#{target_branch}`.strip!
  diff_command = "git #{command} #{options[command].additional_arguments.join " "} #{merge_base} #{source_remote}/#{source_branch}".gsub /\s* /, " "
  puts "Executing #{diff_command}"

  # Fork a child so that it gets access to the terminal. This makes "git diff" work with paging.
  child = Kernel.fork do ||
      Kernel.exec "#{diff_command} ;"
  end

  # Wait for the child
  Process.wait child

when "status"
  argument = options[command].additional_arguments.shift
  pull = find_pull_request_from_command_line_argument git, github_project, argument
  unless pull
    puts "No matching pull request found"
    exit 1
  end

  puts "#{pull.summary}\n\n"
  if pull.statuses.empty?
    puts "No status found."
    exit
  end

  max_context = pull.statuses.map { |s| s.context.length }.max

#   puts <<EOS
# #{" " * (max_context + 5)}(cmd-double-click to open links)
# EOS
  pull.statuses.each do |status|
    puts "#{GitPr::PullRequest.summary_icon(status.state)}  #{status.context.ljust(max_context)}  #{status.target_url}"
  end
  puts "\n"

  exit (pull.status.state == 'success' ? 0 : 1)

end
