#!/usr/bin/ruby

# Future improvements:
# 1) Use more git shell integration
#    https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
#    https://coderwall.com/p/bt93ia
# 2) Take a branch name instead of a PR number and Do The Right Thing


require 'colorize'
require 'git'
require 'highline/import'
require 'io/console'
require 'octokit'
require 'optparse'
require 'pp'
require 'git_pr'
require 'ostruct'

$verbose = false
options = OpenStruct.new(:help => false,
                         :verbose => false,
                         :project => "origin",
                         :pull_request => nil,
                         :auth => OpenStruct.new(),
                         :list => OpenStruct.new(),
                         :merge => OpenStruct.new(),
                         :open => OpenStruct.new())

global_options = OptionParser.new do |opts|
  opts.banner = "Usage: git pr [options] subcommand [options]"

  opts.separator "\nGlobal options"

  opts.on("-p",
          "--project [REMOTE|PROJECT]",
          "The GitHub project to access. Can be a named remote, or a GitHub project in",
          "<user>/<project> form. Defaults to the GitHub project that the \"origin\" remote",
          "points to.") do |project|
    options.project = project
  end
  opts.on("-h", "--help", "Show help") do
    options.help = true
  end
  opts.on("-v", "--verbose", "Verbose output") do
    $verbose = true
  end
  opts.on("-V", "--version", "Print version") do
    puts GitPr::VERSION
    exit
  end

    # auth: Check GitHub auth credentials, and prompt to update them if necessary
    # list: List open pull requests
    # open: Open the webpage for a pull request
  opts.separator <<eos

Valid subcommands:
    merge: Merge and close a pull request

eos
end

subcommands = {
  # 'auth' => OptionParser.new do |opts|
  #   opts.banner = "Usage: git pr auth [options]"

  #   opts.separator "\nAuth command options"

  #   opts.on("-r", "--readonly", "Check without prompting") do |v|
  #     options.auth.readonly = true
  #   end

  #   opts.separator ""
  # end,
  # 'list' => OptionParser.new do |opts|
  #   opts.banner = "Usage: git pr list [options]"

  #   opts.separator "\nList command options"

  #   opts.on("-r", "--readonly", "Check without prompting") do |v|
  #     options.list.readonly = true
  #   end

  #   opts.separator ""
  # end,
  'merge' => OptionParser.new do |opts|
    opts.banner = "Usage: git pr merge [options] [PR number]"

    opts.separator "\nMerge command options"

    opts.separator ""
  end,
  # 'open' => OptionParser.new do |opts|
  #   opts.banner = "Usage: git pr open [options]"

  #   opts.separator "\nOpen command options"

  #   opts.on("-r", "--readonly", "Check without prompting") do |v|
  #     options.open.readonly = true
  #   end

  #   opts.separator ""
  # end
}

begin
  global_options.order!
rescue OptionParser::InvalidOption => e
  puts e
  puts global_options
  exit
end

command = ARGV.shift
if !subcommands[command]
  puts global_options
  exit
end

begin
  options[command].additional_arguments = subcommands[command].permute!
rescue OptionParser::InvalidOption => e
  puts e
  puts subcommands[command]
  exit
end

if not GitPr::GitHub.test_credentials and not GitPr::GitHub.prompt_for_credentials
  exit -1
end

GitPr::GitHub.initialize_octokit

# Get local Git object pointed at our repo root
git = Git.open `git rev-parse --show-toplevel`.chomp!

def pull_summary(pull)
  return "##{pull[:number]} from #{pull[:user][:login]}: \"#{pull[:title]}\""
end

# Figure out what GitHub project we're dealing with.
github_project = GitPr::GitHub.determine_project_name_from_command_line git, options.project

case command

when "merge"
  unless options.merge.additional_arguments.empty?
    pull_request = options.merge.additional_arguments.shift.to_i
  end
  # Load a pull request
  pull = GitPr::GitHub.find_or_prompt_for_pull_request github_project, pull_request
  GitPr::merge_pull_cleanly git, pull

when "diff", "difftool"
  unless options.merge.additional_arguments.empty?
    pull_request = options.merge.additional_arguments.shift.to_i
  end
  # Load a pull request
  pull = GitPr::GitHub.find_or_prompt_for_pull_request github_project, pull_request
  GitPr::merge_pull_cleanly git, pull

end
