#!/usr/bin/ruby

# Future improvements:
# 1) Use more git shell integration
#    https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
#    https://coderwall.com/p/bt93ia
# 2) Take a branch name instead of a PR number and Do The Right Thing


require 'colorize'
require 'git'
require 'git_pr'
require 'highline/import'
require 'io/console'
require 'octokit'
require 'optparse'
require 'ostruct'
require 'pp'

$verbose = false
$default_remotes = ["origin", "upstream"]

options = OpenStruct.new(:help => false,
                         :verbose => false,
                         :project => nil,
                         :pull_request => nil,
                         :diff => OpenStruct.new(),
                         :difftool => OpenStruct.new(),
                         :list => OpenStruct.new(),
                         :merge => OpenStruct.new(),
                         :open => OpenStruct.new())

global_options = OptionParser.new do |opts|
  opts.banner = <<eos
git_pr version #{GitPr::VERSION}

Usage: git pr [options] subcommand [options]
eos

  opts.separator "\nGlobal options"

  opts.on("-p",
          "--project [REMOTE|PROJECT]",
          "The GitHub project to access. Can be a named remote, or a GitHub project in",
          "<user>/<project> form. Defaults to the GitHub project that the \"origin\"",
          "or \"upstream\" remote points to.") do |project|
    options.project = project
  end
  opts.on("-h", "--help", "Show help") do
    options.help = true
  end
  opts.on("-v", "--verbose", "Verbose output") do
    $verbose = true
  end
  opts.on("-V", "--version", "Print version") do
    puts GitPr::VERSION
    exit
  end

  opts.separator <<eos

Valid subcommands:
    merge: Merge and close a pull request
    list: List open pull requests

Run "git pr <subcommand> -h" for help with subcommands.

eos
end

def make_diff_argument_parser command_name
  OptionParser.new do |opts|
    opts.banner = <<eos
Usage: git pr #{command_name} [PR number] [-- [additional options]]

Fetch the latest changes for the specified PR, and then run "git
#{command_name}". Additional options are passed to the "git #{command_name}" command.
eos

    opts.separator ""
  end
end

subcommands = {
  'diff' => make_diff_argument_parser("diff"),
  'difftool' => make_diff_argument_parser("difftool"),
  'list' => OptionParser.new do |opts|
    opts.banner = "Usage: git pr list [options]"

    opts.separator "\nList command options"

    opts.on("-u", "--user [USERNAME]", "Only list PRs for the named GitHub user") do |user|
      options.list.user = user
    end

    opts.separator ""
  end,
  'merge' => OptionParser.new do |opts|
    opts.banner = <<eos
Usage: git pr merge [PR number]

If a PR number isn't passed, a menu of open PRs will be displayed.
eos

    # opts.separator "\nMerge command options"

    opts.separator ""
  end,
  # 'open' => OptionParser.new do |opts|
  #   opts.banner = "Usage: git pr open [options]"

  #   opts.separator "\nOpen command options"

  #   opts.on("-r", "--readonly", "Check without prompting") do |v|
  #     options.open.readonly = true
  #   end

  #   opts.separator ""
  # end
}

begin
  global_options.order!
rescue OptionParser::InvalidOption => e
  puts e
  puts global_options
  exit
end

command = ARGV.shift
if !subcommands[command]
  puts global_options
  exit
end

begin
  options[command].additional_arguments = subcommands[command].permute!
rescue OptionParser::InvalidOption => e
  puts e
  puts subcommands[command]
  exit
end

if not GitPr::GitHub.test_credentials and not GitPr::GitHub.prompt_for_credentials
  exit -1
end

GitPr::GitHub.initialize_octokit

# Get local Git object pointed at our repo root
git = Git.open `git rev-parse --show-toplevel`.chomp!

def pull_summary(pull)
  return "##{pull[:number]} from #{pull[:user][:login]}: \"#{pull[:title]}\""
end

# Figure out what GitHub project we're dealing with.
github_project = GitPr::GitHub.determine_project_name_from_command_line git, options.project, $default_remotes

case command

when "merge"
  unless options.merge.additional_arguments.empty?
    pull_request = options.merge.additional_arguments.shift.to_i
  end
  # Load a pull request
  pull = GitPr::GitHub.find_or_prompt_for_pull_request github_project, pull_request
  GitPr::merge_pull_cleanly git, pull

when "list"
  pulls = Octokit.pulls "#{github_project}/pulls"
  if options.list.user
    pulls = pulls.select { |p| p[:user][:login] == options.list.user }
  end

  if pulls.any?
    pulls.each { |p| puts pull_summary(p) }
  else
    puts "No open pull requests found.".yellow
  end


when "diff", "difftool"
  pull_request = nil

  unless options[command].additional_arguments.empty?
    pull_request = options[command].additional_arguments.shift.to_i
  end

  unless pull_request
    puts "Must specify a pull request to diff.\n".red
    puts subcommands[command]
    exit -1
  end

  puts "Getting pull request information..."
  begin
    pull = Octokit.pull github_project, pull_request
  rescue Octokit::NotFound
    puts "Pull request #{pull_request} not found in #{github_project}.\n".red
    puts subcommands[command]
    exit -1
  end

  # Make sure we have the source and destination remotes
  source_remote, target_remote = GitPr.ensure_remotes_for_pull_request git, pull

  # Figure out if we need to fetch; skip it if we can
  def have_commit_locally git, sha
    begin
      git.object sha
    rescue Git::GitExecuteError
      return false
    end
    true
  end
  source_remote.fetch unless have_commit_locally git, pull[:head][:sha]
  target_remote.fetch unless have_commit_locally git, pull[:base][:sha]

  source_branch = pull[:head][:ref]
  target_branch = pull[:base][:ref]
  merge_base = `git merge-base #{source_remote}/#{source_branch} #{target_remote}/#{target_branch}`.strip!
  diff_command = "git #{command} #{options[command].additional_arguments.join " "} #{merge_base} #{source_remote}/#{source_branch}".gsub /\s* /, " "
  puts "Executing #{diff_command}"

  # Fork a child so that it gets access to the terminal. This makes "git diff" work with paging.
  child = Kernel.fork do ||
      Kernel.exec "#{diff_command} ;"
  end

  # Wait for the child
  Process.wait child

end
